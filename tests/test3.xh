class BaseObject
{
public:

};

class Texture : BaseObject
{
	#include "reflection_texture_inject.inl"
};

class Mesh : BaseObject
{
	#include "reflection_mesh_inject.inl"
};

namespace std
{
	class string
	{
	public:
		
	};
}

// generated (reflection.h)
namespace Reflection
{
	class Type
	{
	
	};
	template <BaseObject> Type* GetType(BaseObject& obj) 
	{
		// generic approach
		Texture* t0 = dynamic_cast<Texture*>(&obj);
		Mesh* t1 = dynamic_cast<Mesh*>(&obj);
		if(t0)
			return Reflection::GetType(*t0);
		if(t1)
			return Reflection::GetType(*t1);
	}
	
	template <Texture> Type* GetType(Texture& obj) 
	{
		return Reflection::Type::Texture;
	}
	
	template <std::string> Type* GetType(std::string& obj)
	{
		return Reflection::Type::Std__String;
	}
	
	template <class T> Type* GetType(T&) { return nullptr; }
};

void test()
{
	BaseObject* obj = new Texture();
	
	Reflection::GetType(obj);
	auto* objInfo = Reflection::GetType(obj);
	auto* objInfo = Reflection::GetType(obj);
	
}

