class TestFunctionPointers
{
public:
	void *(*__start_routine) (void *);
	void *((*__start_routine2)) (void *);
	void (*localFP)(int a, float);
	void A(void (*)(int a, float));
	void B(bool (*test)(int a, float));

	void (*localFP)(int a, float), *test;
	float A(), B(), c;
	std::float A(), B(), c;
	std::vector<int> A(), B(), c;
};

enum
{
	Anonymous=10,
	Enumeration=20
};

class CBase
{
	private:

		int                        iMoo;

		union
		{
			long long          llSqueak;

			struct
			{
				void            *pvMeow;
				long              lBark;
			};
		};

		struct
		{
			char               *pcChirp;
		};
};

class CDerived : private CBase
{
	friend class CFriend;
};

class CFriend
{
	public:

		void fnFriend( CDerived &rD )
		{
			rD.iMoo;		// cannot access private member declared in class 'CBase'
			rD.pvMeow;      // WHY THE FRELL DOES THIS COMPILE?
			rD.lBark;       // WHY THE FRELL DOES THIS COMPILE?
			rD.pcChirp;     // cannot access private member declared in class 'CBase'
			rD.llSqueak;    // cannot access private member declared in class 'CBase'
		}
};
enum TestEnum
{
	Bla = 10,
	Test = 20, 
	Foo = 30,
	FooBar,
	FooTest,
	Bla2 = 10,
	Bla3 = Bla2+1,
	Difficult = (10,20),
	Hard = ({10,20},),
	Harder = ({[20,30],},),
	Insane = <({[20,30],},),>
};


class TestNestedEnum
{
public:
	enum MyNestedEnum {
		Test,
		Something=100
	};
};


// TestStrangeDefinitions
class TestTypedef __ttypedef;
struct TestTypedef __ttypedef2;
union TestTypedef __ttypedef3;

int myTestFunc();

class TestClassWithInstances
{
	int _v;
} a, *b;

// TestTypedef
class TestTypedef
{
	// simple typedef
	typedef unsigned long ulong;
 
	// the following two objects have the same type
	unsigned long l1;
	ulong l2;
 
	// more complicated typedef
	typedef int int_t, *intp_t, (*fp)(int, ulong), arr_t[10];
 
	// the following two objects have the same type
	int a1[10];
	arr_t a2;
 
	// common C idiom to avoid having to write "struct S"
	typedef struct {int a; int b;} S, *pS;
 
	// the following two objects have the same type
	pS ps1;
	S* ps2;
 
	// error: conflicting type specifier
	// typedef static unsigned int uint;
 
	// std::add_const, like many other metafunctions, use member typedefs
	template< class T>
	struct add_const {
		typedef const T type;
	};
};



using namespace TestNamespace;
using namespace Test::Nested::Namespace;
using namespace ::Test::Prefixed::Namespace;
using std::string;

class TestForwardDeclarationClass;
struct TestForwardDeclarationStruct;
union TestForwardDeclarationUnion;

namespace TestNamespace
{
	template <class T>
	class TestClass
	{
		int size();

		T hoi;
	};


	int TestFunc();

};

// TestAnonymousNamespace
namespace
{
	int FuncInAnonymousNamespace();
}

template <class T, typename T2, int v=10>
class TestTemplate
{
	T test;
	T2 test2;
	template<class T3> void Foo();
};

// TestAnonymousClass
class
{
	int TestAnonymousClass();
};

// TestAnonymousStruct
struct
{
	int TestAnonymousStruct();
};


class TestConstructors
{
public:
	TestConstructors::TestConstructors(float f);
	TestConstructors::TestConstructors(float a, std::string b);
	TestConstructors::~TestConstructors();

	TestConstructors() : foo(10) {}
	TestConstructors() : foo(10), bar(20) {	}
	

	virtual TestConstructors();
	TestConstructors();

	virtual ~TestConstructors();
	TestConstructors(int,std::vector<int> );
	~TestConstructors();
protected:
	int myProtectedVariable;

};
class TestFunctionPointer
{
	void (*fpointer)();
	void Increment(int count=1, bool (*filterAllows)(Token& token)=&FilterWhitespaceComments);
};

class TestSimpleFunctionsDirectInlineFunctions
{
public:
	void A() { }
	int B() { return 10; }
	float C() { return 15.0f; }
	double D() { return 100.0; }
	string E() { { int subscope; } /* bla */ return "hello there friend"; }

	TestSimpleCrossReference F() { return TestSimpleCrossReference(); }
};



class TestSimpleVariablesModes
{
public:
	int a;
	float b;
	double c;
	short d;
	char e;
	unsigned short extern volatile f;
	mutable unsigned int g;
	unsigned char h;
	randomType j;
private:
	int priv_a;
protected:
	int prot_a;
};

class TestSimpleVariablesPublicWithInitialization
{
public:
	int a=10;
	float b=11.0f;
	double c=12.0;
	short d=13;
	char e='a';
	unsigned short f=(500,20);
	unsigned int g=10000;
	unsigned char h='a';
};

class TestSimplePointers
{
public:
	int* a;
	float* b;
	double* c;
	int** aa;
	float** bb;
	double** cc;	
};


class TestHardPointers
{
	const mutable static float *a;
	const mutable static float * const b;
	const mutable static float * const * volatile c;
	const mutable static float * const * volatile d1, * const d2, * volatile * const d3;
};

class TestSimpleVariablesMultiline
{
public:
	int x,y,z;
	float x2,y2,z2;
	double x3=10.0,y3=20.0,z3=30.0;
	double x4=(10.0,20.0),y4=(20.0,30.0),z4=(30.0,40.0);
};

class TestSimpleArrayVariables
{
public:
	int a[10];
	float b[20];
	double c[30];
	short d[40];
	char e[50];
	unsigned short f[60];
	unsigned int g[70];
	unsigned char h[80];
};


class TestSimpleMultidimArrayVariables
{
public:
	int a[10][11];
	float b[20][22];
	double c[30][33];
	short d[40][44];
	char e[50][55];
	unsigned short f[60][66];
	unsigned int g[70][77];
	unsigned char h[80][88];
};

class TestSimpleNamespaces
{
public:
	std::string a;
	std::something_else23 b;
	std::string c="test";
};

class TestNestedClass
{
public:
	class SubClass
	{
	public:
		int a;
	};

	SubClass a;
};

class TestInheritance: public TestSimpleFunctionsDirect, private TestSimpleFunctionsDirectWithArguments, protected TestSimpleFunctionsDirectInlineFunctions
{

};


class TestSimpleCrossReference
{
public:
	TestSimpleVariablesPublic a, b=TestSimpleVariablesPublic(10,20), c;
};

class TestSimpleFunctionsDirectWithArguments
{
public:
	void A0(), A1(int a);
	int B(int a, float b);
	float C(int a, float b, char c);
	double D(int a, float b, char c, std::string d);
	string E(int a, float b, char c, std::string d, unsigned int e);
	TestSimpleCrossReference F(int a, float b, char c, std::string d, unsigned int e, unsigned char f);
};

class TestTemplateTypes
{
public:
	std::map<int, std::vector<float>> a;
	std::vector<std::unique_ptr<TestTemplateTypes>> b;
};

class TestSimpleFunctionsDirect
{
public:
	void A();
	int B();
	float C();
	double D();
	string E();
	TestSimpleCrossReference F();
};

class TestClassOperators
{
	virtual operator float();
	virtual TestClassOperator::operator int();
	operator double();
	TestClassOperator::operator int();
	
	R& TestClassOperator::operator =(S b);

	R TestClassOperator::operator +(S b);
	R TestClassOperator::operator -(S b);
	R TestClassOperator::operator +();
	R TestClassOperator::operator -();
	R TestClassOperator::operator *(S b);
	R TestClassOperator::operator /(S b);
	R TestClassOperator::operator %(S b);
	R& TestClassOperator::operator ++();
	R TestClassOperator::operator ++(int);
	R& TestClassOperator::operator --();
	R TestClassOperator::operator --(int);
	bool TestClassOperator::operator ==(S const& b);
	bool TestClassOperator::operator !=(S const& b);
	bool TestClassOperator::operator >(S const& b);
	bool TestClassOperator::operator <(S const& b);
	bool TestClassOperator::operator >=(S const& b);
	bool TestClassOperator::operator <=(S const& b);
	R TestClassOperator::operator !();
	R TestClassOperator::operator &&(S b);
	R TestClassOperator::operator ||(S b);
	R TestClassOperator::operator ~();
	R TestClassOperator::operator &(S b);
	R TestClassOperator::operator |(S b);
	R TestClassOperator::operator ^(S b);
	R TestClassOperator::operator <<(S b);
	R TestClassOperator::operator >>(S b);
	R& TestClassOperator::operator +=(S b);
	R& TestClassOperator::operator -=(S b);
	R& TestClassOperator::operator *=(S b);
	R& TestClassOperator::operator /=(S b);
	R& TestClassOperator::operator %=(S b);
	R& TestClassOperator::operator &=(S b);
	R& TestClassOperator::operator |=(S b);
	R& TestClassOperator::operator ^=(S b);
	R& TestClassOperator::operator <<=(S b);
	R& TestClassOperator::operator >>=(S b);
	R& TestClassOperator::operator [](S b);
	R& TestClassOperator::operator *();
	R TestClassOperator::operator &();
	R* TestClassOperator::operator ->();
	R& TestClassOperator::operator ->*(S b);
	R TestClassOperator::operator ()(S a, T b, T2 c);
	R TestClassOperator::operator ,(S b);
	
	TestClassOperator::operator float();
	TestClassOperator::operator double();
	TestClassOperator::operator SomeClass();
	void* TestClassOperator::operator new(size_t x);
	void* TestClassOperator::operator new[](size_t a);
	void TestClassOperator::operator delete(void *a);
	void TestClassOperator::operator delete[](void *a);
};



