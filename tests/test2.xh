class CVector3
{
public:
	float x,y,z;
	float V[3];

	static CVector3 Zero;

	CVector3();
	CVector3(float* XYZ);
	CVector3(float X, float Y=0.0f, float Z=0.0f);
	CVector3(bool DontInitialize) { }

	__forceinline bool operator== (const CVector3& v2) const { if(x != v2.x) return false;  if(y != v2.y) return false; if(z != v2.z) return false; return true; /*return M3D_COMPAREFP(x, v2.x, 0.001) && M3D_COMPAREFP(y, v2.y, 0.001) && M3D_COMPAREFP(z, v2.z, 0.001);*/ }
	__forceinline bool operator!= (const CVector3& v2) const { return !((*this) == v2); }

	// for sorting/listing purposes.
	bool operator< (const CVector3 &v) const;

	CVector3 operator / (const CVector3) const;
	CVector3 operator * (const CVector3) const;
	CVector3 operator + (const CVector3) const;
	CVector3 operator - (const CVector3) const;
	CVector3 operator- () const { return CVector3( -x, -y, -z ); }

	inline CVector3& operator *= (const CVector3& a) { V[0] *= a.V[0]; V[1] *= a.V[1]; V[2] *= a.V[2]; return (*this); }
	inline CVector3& operator /= (const CVector3& a) { V[0] /= a.V[0]; V[1] /= a.V[1]; V[2] /= a.V[2]; return (*this); }
	inline CVector3& operator += (const CVector3& a) { V[0] += a.V[0]; V[1] += a.V[1]; V[2] += a.V[2]; return (*this); }
	inline CVector3& operator -= (const CVector3& a) { V[0] -= a.V[0]; V[1] -= a.V[1]; V[2] -= a.V[2]; return (*this); }

	CVector3 operator * (const float) const;
	CVector3 operator + (const float) const;
	CVector3 operator - (const float) const;
	CVector3 operator / (const float) const;

	inline CVector3& operator *= (const float a) { return (*this) = (*this) * a; }
	inline CVector3& operator += (const float a) { return (*this) = (*this) + a; }
	inline CVector3& operator -= (const float a) { return (*this) = (*this) - a; }
	inline CVector3& operator /= (const float a) { return (*this) = (*this) / a; }

	//! \name Row-ordered vector * matrix (DirectX Style)
	//@{
	CVector3 operator * (const CMatrix& Mat) const;
	CVector3& operator *= (const CMatrix& Mat);
	//@}

	CVector3 operator * (const CQuat& Q) const;
	CVector3& operator *= (const CQuat& Q);

	CVector3& operator= (const CVector3& v) { for(int i=0;i<3;++i) V[i] = v.V[i]; return *this; }


	inline float& operator[] (int index) { return V[index]; }
	inline const float& operator[] (int index) const { return V[index]; }

	static CVector3 Create() { return CVector3(); }
	static CVector3 Create(float x, float y, float z) { return CVector3(x,y,z); }
	static float Dot(const CVector3& v1, const CVector3& v2) { return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z; }
	
	float GetX() { return x; }
	float GetY() { return y; }
	float GetZ() { return z; }

	void SetX(float v) { x = v; }
	void SetY(float v) { y = v; }
	void SetZ(float v) { z = v; }

	inline void Set(const CVector3& v1) { V[0]=v1[0]; V[1]=v1[1]; V[2]=v1[2]; }
	inline void Set(float v1[3]) { V[0]=v1[0]; V[1]=v1[1]; V[2]=v1[2]; }
	inline void Set(float X=0.0f, float Y=0.0f, float Z=0.0f) { x=X; y=Y; z=Z; }

	void SetTo(const CVector3& other) { (*this) = other; }
	void SetToMirror(const CVector3& v0, const CVector3& mirrorPoint) {(*this) = v0.Mirror(mirrorPoint); }
	void SetToCross(const CVector3& v1, const CVector3& v2) { (*this) = v1.Cross(v2); }
	void SetToUnproject(const CVector3& v0, const CMatrix& mat, float viewportWidth, float viewportHeight) { (*this) = CVector3::UnprojectVector(v0, mat, viewportWidth, viewportHeight); }
	void SetToProject(const CVector3& v0, const CMatrix& mat, float viewportWidth, float viewportHeight) { (*this) = CVector3::ProjectVector(v0, mat, viewportWidth, viewportHeight); }
	void SetToInterpolatedRotation(const CVector3& v0, const CVector3& v1, float factor) { (*this) = v0.InterpolateRotation(v1, factor); }
	void SetToMatrixLocalX(const CMatrix& m);
	void SetToMatrixLocalY(const CMatrix& m);
	void SetToMatrixLocalZ(const CMatrix& m);
	void SetToMatrixViewLocalX(const CMatrix& m);
	void SetToMatrixViewLocalY(const CMatrix& m);
	void SetToMatrixViewLocalZ(const CMatrix& m);
	void SetToMatrixTranslation(const CMatrix& m);
	void Transform(const CMatrix& pre_m);
	void Add(const CVector3& v) { (*this) += v; }
	void Sub(const CVector3& v) { (*this) -= v; }
	void Mul(const CVector3& v) { (*this) *= v; }
	void MulNumber(float v) { (*this) *= v; }
	void Normalize() { float magnitude=1.0f/sqrtf(V[0] * V[0] + V[1] * V[1] + V[2] * V[2]); V[0] *= magnitude; V[1] *= magnitude; V[2] *= magnitude; }
	float Dot(const CVector3& v2) const { return x * v2.x + y * v2.y + z * v2.z; }

	//! Get the angle between two vectors. Uses Dot (Dot(a,b) = mag(a)*mag(b)*cos(betweenAngle)), returns betweenAngle.
	float AngleBetween(const CVector3& v2) const;
	float SqrLength() const;
	float Length() const;
private:
};


class  CPlane
{
public:
	float a,b,c,d;

	CPlane() { a=b=c=d=0.0f; }

	inline void CreatePlane(CVector3 PointOnPlane, CVector3 PlaneNormal) { a = PlaneNormal.x; b = PlaneNormal.y; c = PlaneNormal.z; d = -PlaneNormal.Dot(PointOnPlane); }

	//! Find closest point to specified Point on the plane
	inline CVector3 GetClosestPoint(const CVector3& Point) const { CVector3 normal(a,b,c); return Point - normal * (d + Point.Dot(normal)); }
	
	//! Reflects vector over plane
	inline CVector3 ReflectVector(const CVector3& Reflect) const { return Reflect.Mirror(GetClosestPoint(Reflect)); }

	//! Returns this plane, only normalized.
	CPlane GetNormalizedPlane() const;
	//! Gives the result of the Ax+By+Cz+D computation.
	inline float ClassifyPoint(const CVector3& pt) const { return a*pt.x + b*pt.y + c*pt.z + d; }
};

class CMatrix
{
public:
	CMatrix() 
	{ 
		Identity(); 
	}
	CMatrix(bool dontInitialize) 
	{ 
	}
	CMatrix(float Value) 
	{ 
		Zero(Value); 
	}
	CMatrix(const CMatrix& m) 
	{ 
		memcpy(MatrixFlat, m.MatrixFlat, 64); 
	}

	float Matrix[4][4]; // x<column>, y<row>
	float MatrixFlat[16]; // index formula x<column>*4+y<row>

	inline CMatrix operator * (const CMatrix& Mat) const { CMatrix mnew(*this); mnew *= Mat; return mnew; }
	inline CMatrix operator ^ (const CMatrix& Mat) const { CMatrix mnew(*this); mnew ^= Mat; return mnew; }
	inline CMatrix operator + (const CMatrix& Mat) const { CMatrix mnew(*this); mnew += Mat; return mnew; }
	inline CMatrix operator - (const CMatrix& Mat) const { CMatrix mnew(*this); mnew -= Mat; return mnew; }

	CVector3 operator * (const CVector3& V) const;	//!< \name matrix * Column-ordered vector (OpenGL Style)
	CMatrix& operator *= (const CMatrix& Mat);		//!< Matrix Concatenation (opengl/mathematics style, also known as post-multiplication)(normal way, r11 = m11*n11+m21*n12+m31*n13+m41*n14, etc.)
	CMatrix& operator ^= (const CMatrix& Mat);		//!< Inverse Matrix Concatenation (directX style, also known as pre-multiplication)
	CMatrix& operator += (const CMatrix& Mat);		//!< Matrix Addition
	CMatrix& operator -= (const CMatrix& Mat);		//!< Matrix Substraction

	//! Matrix Comparison Operator
	bool operator == (const CMatrix& Mat) const;

	//! Matrix Inverse Comparison Operator
	inline bool operator != (const CMatrix& Mat) const { return !(*this == Mat); }

	//! Fill the matrix with zeroes
	void Zero(float Value=0.0f);
	//! Make the matrix an identity matrix (default at construction)
	void Identity(float scale=1.0f);
	//! Calculate the determinant of the matrix (when 0, the matrix has no inverse.)
	float Determinant();
	//! Transpose the matrix (switch row to column and vice versa)
	void Transpose();
	
	//! Matrix inverse (is a pretty costly task so use with care.)
	bool Inverse();

	//! Row-wise normalisation (Normalizes every axis matrix row to compensate for matrixial drift, shearing your values.)
	void Normalize();

	float Sum() const { float sum=0.0f; for(int y=0; y<4; y++) { for(int x=0;x<4;x++) { sum += fabsf(Matrix[x][y]); } } return sum; }


	void Translate3(const CVector3& Translate);
	void Scale3(const CVector3& Scale);

	void Translate3(float x, float y, float z) { Translate3(CVector3(x,y,z)); }
	void Scale3(float x, float y, float z) { Scale3(CVector3(x,y,z)); }
	void ScaleUniform(float xyz) { Scale3(CVector3(xyz,xyz,xyz)); }

	void RotateX(float Theta);
	void RotateY(float Theta);
	void RotateZ(float Theta);

	//! Euler coordinates -> Matrix
	void RotateEuler(float RotX, float RotY, float RotZ);
	inline void RotateEuler(CVector3 Rot) { RotateEuler(Rot.x, Rot.y, Rot.z); }

	//! Rotate over an axis by a certain angle.
	void RotateAxisAngle(const CVector3& Axis, float angle);

	//! Matrix Multiplication, mostly used for multiplying with a matrix of values. (r11 = m11*n11)
	void MultiplyValues(CMatrix& Mat);

	void SetTo(const CMatrix& other) { (*this) = other; }
	void Mul(const CMatrix& other) { (*this) *= other; }
	void MulVector(CVector3& other) { other = (*this) * other; }
	void MulVectorInto(const CVector3& other, CVector3& into) { into = (*this) * other; }

	void SetLocalX(const CVector3& a) { Matrix[0][0] = a.x; Matrix[0][1] = a.y; Matrix[0][2] = a.z; }
	void SetLocalY(const CVector3& a) {  Matrix[1][0] = a.x; Matrix[1][1] = a.y; Matrix[1][2] = a.z; }
	void SetLocalZ(const CVector3& a) { Matrix[2][0] = a.x; Matrix[2][1] = a.y; Matrix[2][2] = a.z; }

	float Get(int column, int row) { return Matrix[column][row]; } //!< Function used to get Lua the matrix values
	void Set(int column, int row, float value) { Matrix[column][row] = value; } //!< Function used to set matrix values in Lua.

	bool IsIdentity() { static CMatrix IdentMatrix; if(*this == IdentMatrix) return true; else return false; }

	void LerpWith(const CMatrix& b, float fac);

	//! Calculates the determinant of a 3x3 matrix. (internally used but available for custom use as well)
	float Determinant3x3(float m11, float m21, float m31, float m12, float m22, float m32, float m13, float m23, float m33) { return (m21*m32*m13+m31*m12*m23+m11*m22*m33)-(m33*m12*m21+m23*m32*m11+m13*m22*m31); }

	void SetProjection(float FieldOfViewYDegrees, float AspectRatio, float Near, float Far) { (*this) = CMatrix::Projection(FieldOfViewYDegrees, AspectRatio, Near, Far); }
	void SetProjectionOrtho(float Width, float Height) { (*this) = CMatrix::ProjectionOrtho(Width, Height); }
	void SetView(const CVector3& Eye, const CVector3& LookAt, const CVector3& Up) { (*this) = CMatrix::View(Eye, LookAt, Up); }
	void SetTransformIntoCameraMatrix(const CMatrix& m) {(*this) = TransformIntoCameraMatrix(m); }
	void SetLookat(const CVector3& Position, CVector3 Direction, CVector3 Up=CVector3(0.0f, 0.0f, 1.0f), bool Transpose=true);
	void SetTranslation(const CVector3& set) { Matrix[3][0] = set.x, Matrix[3][1] = set.y, Matrix[3][2] = set.z; }

	// unrolled vectorless functions
	void SetView(float Eye_x, float Eye_y, float Eye_z, float Lookat_x, float Lookat_y, float Lookat_z, float Up_x, float Up_y, float Up_z) { (*this) = CMatrix::View(CVector3(Eye_x, Eye_y, Eye_z), CVector3(Lookat_x, Lookat_y, Lookat_z), CVector3(Up_x, Up_y, Up_z)); }
	void SetTranslation(float x, float y, float z) { Matrix[3][0] = x, Matrix[3][1] = y, Matrix[3][2] = z; }
	void SetLookat(float Eye_x, float Eye_y, float Eye_z, float Lookat_x, float Lookat_y, float Lookat_z, float Up_x, float Up_y, float Up_z, bool Transpose = true) { SetLookat(CVector3(Eye_x, Eye_y, Eye_z), CVector3(Lookat_x, Lookat_y, Lookat_z), CVector3(Up_x, Up_y, Up_z), Transpose); }

};

class CQuat
{
public:
    CQuat(float sx = 0.0f, float sy = 0.0f, float sz = 0.0f, float sw = 1.0f);
    ~CQuat();
	
	inline void Set(float sx, float sy, float sz, float sw) {x = sx, y = sy, z = sz, w = sw;}
	CQuat& operator = (CQuat Qt);
	void Reset();																							//!< Reset the quaternion to the identity quaternion.

	inline CQuat& operator += (const CQuat& Qt) { x += Qt.x; y += Qt.y; z += Qt.z; w += Qt.w; return *this; }
	inline CQuat operator + (const CQuat& Qt) const { CQuat qres=*this; qres += Qt; return qres; }
	inline CQuat& operator -= (const CQuat& Qt) { x -= Qt.x; y -= Qt.y; z -= Qt.z; w -= Qt.w; return *this; }
	inline CQuat operator - (const CQuat& Qt) const { CQuat qres=*this; qres -= Qt; return qres; }
	inline CQuat& operator *= (const float Val) { x *= Val; y *= Val; z *= Val; w *= Val; return *this; }
	inline CQuat operator * (const float Val) const { CQuat qres=*this; qres *= Val; return qres; }
	CQuat& operator /= (const CQuat& Qt);
	inline CQuat operator / (const CQuat& Qt) const { CQuat qres=*this; qres /= Qt; return qres; }
	CQuat& operator *= (const CQuat& Qt);
	inline CQuat operator * (const CQuat& Qt) const { CQuat qres=*this; qres *= Qt; return qres; }

	inline CQuat& operator ^= (const CQuat& Qt) { CQuat qRes=Qt; qRes *= (*this); (*this) = qRes; return (*this); }
	inline CQuat operator ^ (const CQuat& Qt) const { CQuat qres=*this; qres ^= Qt; return qres; }

	//! Spherical linear interpolation between quaternion q1 and q2 by factor k <0 .. 1>
	static CQuat Slerp(const CQuat& q1, CQuat q2, float k);
	//! Normalised linear interpolation between quaternion q1 and q2 by factor k <0 .. 1>
	static CQuat Nlerp(const CQuat& q1, const CQuat& q2, float k);

	float Dot(const CQuat &q2) const { return w*q2.w+x*q2.x+y*q2.y+z*q2.z; }
	CQuat Cross(const CQuat &q2) const { CQuat cr; cr.w = 0; cr.x = (y * q2.z) - (z * q2.y); cr.y = (x * q2.z) - (z * q2.x); cr.z = (x * q2.y) - (y * q2.x); return cr; }

	static CQuat CreateShortestArcQuat(const CVector3& From, const CVector3& To) { CQuat q; q.ShortestArcToQuat(From, To); return q;}
	static CQuat CreateAxisAngleQuat(const CVector3& Axis, float Angle) { CQuat q; q.AxisAngleToQuat(Axis, Angle); return q;}
	static CQuat CreateEulerQuat(float X, float Y, float Z) { CQuat q; q.EulerToQuat(X, Y, Z); return q;}
	static CQuat CreateVectorQuat(const CVector3& vec, const CVector3& up=CVector3(0.0f, 0.0f, 1.0f)) { CQuat q; q.VectorToQuat(vec, up); return q; }

	void ShortestArcToQuat(const CVector3& From, const CVector3& To );
    void AxisAngleToQuat(const CVector3& Axis, float Angle);
    void EulerToQuat(float X, float Y, float Z);
	void VectorToQuat(const CVector3& vec, const CVector3& up=CVector3(0.0f, 0.0f, 1.0f));

	bool QuatToEuler(float &X, float &Y, float &Z) const;
	bool QuatToAxisAngle(CVector3& Axis, float& Angle);

	inline CVector3 EulerRotation() const { CVector3 ret; QuatToEuler(ret.x, ret.y, ret.z); return ret; }
	inline CVector3 LocalX() const { return CVector3(1.0f - 2.0f * ( y * y + z * z ), 2.0f * ( x * y - w * z ), 2.0f * ( x * z + w * y )); }
	inline CVector3 LocalY() const { return CVector3(2.0f * ( x * y + w * z ), 1.0f - 2.0f * ( x * x + z * z ), 2.0f * ( y * z - w * x )); }
	inline CVector3 LocalZ() const { return CVector3(2.0f * ( x * z - w * y ), 2.0f * ( y * z + w * x ), 1.0f - 2.0f * ( x * x + y * y )); }
	
	void NegateQuat() { x = -x; y = -y; z = -z; w = -w; } // gives the same rotation but a different quaternion.
	inline void ConjugateQuat() { x = -x; y = -y; z = -z; }
	inline void InverseQuat() { NormalizeQuat(); ConjugateQuat();  }
	void NormalizeQuat() { float rMag = 1.0f/MagnitudeQuat(); w *= rMag; x *= rMag; y *= rMag; z *= rMag; }		//!< set length to 1
	float MagnitudeQuat() { return( sqrtf(w*w+x*x+y*y+z*z)); }													//!< Get the length of the quaternion.

	void SetExistingMatrix(CMatrix& M) const;																						//!< get 4x4 rotation matrix
    CMatrix Matrix() const;																						//!< get 4x4 rotation matrix
	void FromMatrix(const CMatrix &M);																			//!< 4x4 rotation matrix to quat
	void FromMatrixSecondary(const CMatrix& M);																	//!< 4x4 rotation matrix to quat - second algorithm

	float xyzw[4];
	float x,y,z,w;
};

class  CTranslateRotateScale
{
public:
	CTranslateRotateScale() { Scale.Set(1.0f, 1.0f, 1.0f); }
	CTranslateRotateScale(const CMatrix& m) { FromMatrix(m); }

	CVector3 Translation;
	CQuat Rotation;
	CVector3 Scale;

	void FromMatrix(const CMatrix& m);
	void ToExistingMatrix( CMatrix& m ) const;
	CMatrix ToMatrix() const { CMatrix m; ToExistingMatrix(m); return m;}
	void Concatenate(const CTranslateRotateScale& other);

	static CTranslateRotateScale Interpolate(const CTranslateRotateScale& f1, const CTranslateRotateScale& f2, float factor, bool slerp=false);
};



 CVector3 vLerp(const CVector3 &v1,const CVector3 &v2, float fac);
 CVector3 vCross(const CVector3 &v1,const CVector3 &v2);
 CVector3 vNormalize(const CVector3 &n);
 float vDot(const CVector3 &v1,const CVector3 &v2);
 float vLength(const CVector3 &v1);

inline CQuat qCross(CQuat &q1, CQuat &q2) { return q1.Cross(q2); }
inline float qDot(CQuat &q1, CQuat &q2) { return q1.Dot(q2); }

 float AngularDiffRadians(float a, float b);
 float AngularDiff(float a, float b);

static float InvSqrt(float x) {	return 1.0f/sqrtf(x); }
